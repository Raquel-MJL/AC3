<!--
XML → EXTENSIBLE MARKUP LANGUAGE - LENGUAJE DE MARCAS EXTENSIBLE.
Define un conjunto de reglas para la codificación de documentos que tanto
personas, como máquinas pueden leer para intercambiar datos entre sistemas. 
Utiliza etiquetas que definen la estructura del documento y también como
debe ser éste transportado y almacenado.

Los archivos .xml son archivos de texto sin formato que utilizan un conjunto de etiquetas 
personalizadas que agrupan los datos y que describen, tanto la estructura, como otras 
características del documento. Incluye tanto etiquetas como datos, proporcionando las 
primeras, estructura a los segundos.

Diferencia con HTML:
XML es extensible, es decir, no incorpora un lenguaje de marcado predefinido, sino
que permite al usuario crear sus propias etiquetas (autodefinidas e ilimitadas) para 
describir contenidos.

Tecnologías XML

    Servicios Web 
        → SOAP
        → WS Policy
        → WSDL
        → XML Signature (para firmas digitales en documentos XML)
        → XML Encryption (para encriptar documentos XML)

    Web semántica
        → RDF
        → RDFa
        → RDF-S
        → OWL
        → RIF
        → SPARQL

Con XPath (lenguaje de acceso) recorremos y procesamos el documento XML. 
Con XQuery (lenguaje de consulta) accedemos y manipulamos los documentos XML.
Con XSLT (lenguaje de transformación) convertimos los XML en otras extensiones. 
Con XSL-FO formateamos docs XML para crear otros archivos. 
Con XML Schema describimos estructura y restringimos datos del XML.

CARACTERÍSTICAS: 
    → Independencia Datos-Formato.
    → Simplicidad en intercambio de datos.
    → Simplicidad al cambiar de plataforma.
    → Formato texto plano.
    → Extensibilidad.
    → Interoperabilidad.
    → Compatibilidad con todo tipo de dispositivos.
    → Accesible para todo tipo de alfabetos y lenguajes.
    → Representación jerárquica y anidada.

PROGRAMAS: Bloc de notas, editores de código, hojas de cálculo, IDE´s de programación.

TERMINOLOGÍA.
Documento XML → Documento de texto plano.
Procesador XML → Lector del documento, analiza el contenido y pasa la información obtenida 
en un formato estructurado a la aplicación que la solicitó.
Caracteres → UTF-8, ISO-8859-1, etc.
Marcas → Etiquetas, Referencias a entidades, Atributos.
Contenido → Todo lo que va entre etiquetas de apertura y cierre. (Pueden ser otros elementos-hijos)
Elementos → Componente lógico del documento (contenido de la etiqueta de apertura y cierre, una vacía)
Etiquetas → Identificador encerrado entre < y >.
    <Apertura>
    </Cierre>
    <Vacías/>

    Reglas para etiquetas:
        Case Sensitive → <nombre></Nombre> no son lo mismo
        Sólo puede haber un elemento raíz.
        Pueden empezar por letra (:) y (_), pero NO por números (aunque sí contenerlos)
            <cliente>  Correcto.
            <_direccion1> Correcto.
            <1precio> Incorrecto.
Atributos → Par nombre - valor 
    Se puede incluir en las etiquetas de apertura y vacías, pero no en las de cierre.
    No puede repetirse su nombre en una misma etiqueta.
        País = "España".
Declaración XML → Se incluye al principio del documento con info. 
    Version  (1.0 o 1.1)
    Encoding (Juego de caracteres con el que se ha codificado el doc,por defecto UTF-8)
    Standalone: (Boolean) especifica si el documento debe validarse con un DTD externo o no. 
Ejemplo: <?xml version="1.0" encoding="UTF-8 standalone = ”no”?>  


ESTRUCTURA DE UN ARCHIVO XML.
    Prólogo (Opcional)
        → Declaración XML.
        → DTD - Declaración de tipo de documento.
        → Comentarios.
        → Instrucciones de procesamiento.
    Cuerpo (Contiene los datos y el marcado)
        → Etiquetas, elementos, datos...
        → Atributos <nombre alias = "Pepito" >Pepe</nombre>
    
    Ejemplo de un mismo contenido XML usado etiquetas o atributos:
    → Con etiquetas:
        <datos_cliente>
            <cliente>
                <nombre>Luis</nombre>
                <apellidos>Sanz García</apellidos>
            </cliente>
            <cliente>
                <nombre>Eva</nombre>
                <apellidos>Salgado López</apellidos>
            </cliente>
        </datos_cliente>

    → Con atributos:
        <datos_cliente>
            <cliente nombre = "Luis" apellidos ="Sanz García" />
            <cliente nombre = "Eva" apellidos = "Salgado López" />
        </datos_cliente>



DOCUMENTO XML BIEN FORMADO

Reglas:
    → Contiene únicamente caracteres Unicode válidos.
    → Hay un solo elemento raíz que contiene al resto.
    → Los nombres de los elementos y de sus atributos no contienen espacios.
    → El primer carácter de un nombre de elemento está correcto.
    → El resto de caracteres pueden ser también números, guiones (-) o puntos (.).
    → Se pueden usar tildes en las etiquetas si el juego de caracteres lo permite.
    → Los caracteres "<" y "&" sólo se utilizan como comienzo de marcas (si no hay que escaparlos) 
        &lt → <
        &gt → >
        &amp → &
        &apos → '
        &quot → "
    → Las etiquetas no pueden contener caracteres especiales ni empezar por xml o XML 
    y no pueden contener espacios en blanco.
    → Las etiquetas de apertura, de cierre y vacías están correctamente anidadas.
    → No falta ni sobra ninguna etiqueta de apertura o cierre.
    → Las etiquetas de cierre coinciden con las de apertura, incluso en mayúsculasminúsculas.
    → Las etiquetas de cierre no contienen atributos.
    → No puede haber dos atributos con el mismo nombre en la misma etiqueta.
    → Los atributos deben tener un valor.
    → Los valores de los atributos están entre están escritos ente comillas simples o dobles.
    → No existen referencias en los valores de los atributos.

DOCUMENTO XML VÁLIDO (Un documento XML puede estar bien formado y no ser válido) Debe incluir:

→ Referencia a una gramática.
→ Incluir sólo elementos y atributos definidos en esa gramática.
→ Cumplir las reglas gramaticales especificadas en la gramática.

A través de DTD (Document Type Definition, definición de tipo de documento) o XML Schema.

DTD 
    Archivos.dtd que definen estructura del XML y especifica las reglas de validación. 
    El procesador XML usa el DTD para comprobar si un documento XML es válido.
    Es el modelo antiguo, heredado del lenguaje SGML.
    Describe: 
        Elementos → Qué etiquetas están permitidas y cuál es su contenido. 
        Estructura → Orden de las etiquetas 
        Anidamiento → Cuáles van incluidas en otras etiquetas. 
    Ubicación:
        Interna → DTD incluido en el XML 
            <!DOCTYPE nombre [declaraciones]>
                "nombre" debe coincidir con el nombre del elemento raíz del documento XML.
        Externa → Archivo independiente de extensión .DTD (en él no se incluye DOCTYPE)
            <!DOCTYPE nombre SYSTEM "Ruta de Acceso/archivo.dtd">

        Híbrida:
            <!DOCTYPE nombre SYSTEM “Ruta de Acceso /archivo.dtd” [declaraciones]>

    DECLARACIONES 

        ELEMENTOS → <!ELEMENT Nombre del elemento (Contenido)>
            Contenido: 
                EMPTY → Debe estar vacío 
                #PCDATA → Puede contener texto 
                ANY → Puede contener texto u otros elementos. 
                Elementos → Pueden incluirse elementos anidados con estos conectores:
                    (,) → Separador de elementos
                    (|) → O 
                    (?) → Puede aparecer una o ninguna vez 
                    (*) → Ninguna, una o varias veces
                    (+) → Una o varias
                    ( ) → Los paréntesis agrupan expresiones
        ATRIBUTOS 
            Dos formas de declararlo: 
                Un atributo para un elemento → <!ATTLIST NombreElemento NombreAtributo TipoAtributo ValorInicialAtt>
                Varios att para un elemento → 
                <!ATTLIST NombreDelElemento  
                NombreDelAtributo1 TipoDeAtributo1 ValorPredeterminado1  
                NombreDelAtributo2 TipoDeAtributo2 ValorPredeterminado2>
            
            Componentes:
                NombreDelElemento (para el cual se crea el atributo)
                NombreDelAtributo 
                Tipo de Atributo 
                Valor inicial Atributo (valor predeterminado)

            Tipos de Atributo: 
                CDATA → El att contiene cualquier carácter. 
                NMTOKEN → Sólo puede contener letras, nº, (.  - _ :)
                NMTOKENS → Igual que el anterior pero con espacios en blanco. 
                ID → El valor del atributo debe ser único 
                IDREF → El valor del atributo debe coincidir con el valor de otro atributo.
                IDREFS → Conjunto de valores que coinciden con el valor ID de otro elemento. 

            Valor Inicial: 
                Valor → Un valor concreto predeterminado 
                #REQUIRED → Att obligatorio. No se especifica valor. 
                #IMPLIED → Att opcional
                #Fixed → Un valor fijo 

XML SCHEMA 
    Creado por W3C como sucesor de DTD, se puede comprobar la validez del documento.
    Se guarda en un archivo.xsd y su elemento raíz es schema. <xs:schema>...</xs:schema>  
    Atributos: 
        xmlns → (XML NameSpace) Especifica el espacio de nombres:   
            Un espacio de nombres XML es un conjunto de nombres identificados mediante una URL.
            Proporciona elementos y atributos con nombre único para resolver la ambigüedad 
            entre elementos o atributos que se llamen igual.
        targetNamespace → Espacio de nombres propio 
        elementFormDefault → Indica si los elementos deben o no estar certificados por el espacio de nombre.
            → qualified: Deben estar cualificados con prefijo. 
            → unqualified: No deben estar cualificados con un prefijo. 
        attributeFormDefault: Indica si los atributos deben o no estar certificados por el espacio de nombre.
            → qualified: Deben estar cualificados por un prefijo. 
            → unqualified: No deben estar cualificados con un prefijo. (Por defecto)


DOCUMENTO INSTANCIA XML (Referencia al esquema XSD)
    Cabecera 
        Declaración XML → <?xml version="1.0" encoding="UTF-8"?> 
        Elemento raíz → <elemento raíz atributos> ... </elemento raíz>
            Atributos
            xmlns:xsi → (Indica que queremos utilizar los elementos definidos en el esquema)
                xmlns:xsi = http://www.w3.org/2001/XMLSchema-instance 
            noNamespaceSchemaLocation → (Vincula el nombre del archivo XSD) 
                xsi:noNamespaceSchemaLocation = "clientes.xsd".
    Cuerpo (Contiene elementos, atributos y datos)
        → Elementos complejos: Anidación complexType para especificar sus subelementos.
            Indicadores del orden de aparición de los elementos anidados. 
            Secuencia → <xs:sequence>...</xs:sequence> → Deben aparecer todos, y en el mismo orden en que se especifican
            Alternativa → <xs:choice>...<xs:choice> → Deben ser opcionales, es decir, incluir el atributo minOccurs = 0
            Todos → <xs:all>...</xs:all> No  es  obligatorio  que  aparezcan  todos  los  elementos  y  además 
            pueden hacerlo en cualquier orden.
                Ejemplo: 
                <xs:element name="Libro"> 
                    <xs:complexType> 
                        <xs:sequence> 
                            <xs:element name="Título" type="xsd:string"/> 
                            <xs:element name="Autor" type="xsd:string" /> 
                        </xs:sequence> 
                    </xs:complexType> 
                </xs:element>
        → Elementos simples: No contienen otros elementos. (Nombre, tipo de dato y otros ajustes)
            Tipos de datos. (Más comunes).
                →xs:string.
                →xs:decimal.
                →xs:int.
                →xs:integer.
                →xs:boolean (Valores true / false).
                →xs:date (Formato Año-Mes-Dia).
                →xs:time (Formato Hora : Minutos : Segundos).
                →xs:positiveInteger.
                →xs:negativeInteger.
                →xs:datetime (Formato Año-Mes-Dia Hora : Minutos : Segundos).
                →xs:anyURI (Indicar una URL)
            Otros ajustes: 
                → Valores por defecto (Se asigna automáticamente al elemento si no se especifica otro)
                → Valor fijo (Se asigna automáticamente al elemento y que no se puede cambiar por otro)
                → Ocurrencia (Min y Max por defecto 1) Si máx indefinido maxOccurs unbounded. minOccurs=0 (es opcional y puede o no aparecer)
            
            Ejemplos: 
            XSD 
                <xs:element name="nombre" type="xs:string" maxOccurs=”4”/> 
                <xs:element name="edad" type="xs:integer" default “00”/> 
                <xs:element name="fecha_nacimiento" type="xs:date"/>  
            XML
                <nombre>Luis</nombre> 
                <edad>24</edad> 
                <fecha_nacimiento>1997-09-10</fecha_nacimiento>               
 
        → Atributos: Se declaran como un simple. Un elemento simple no puede llevar atributos (Se considera complejo) 
        Incluyen un nombre, un tipo de datos y otros ajustes.
        Tipos de datos.
            xs:string.
            xs:decimal.
            xs:int.
            xs:integer.
            xs:positiveInteger.
            xs:negativeInteger.
            xs:boolean (Valores true / false).
            xs:date (Formato Año-Mes-Dia)
            xs:datetime (Formato Año-Mes-Dia Hora : Minutos : Segundos).
            xs:time (Formato Hora : Minutos : Segundos).
            xs:anyURI (Indicar una URL).
            Ejemplo: 
            XSD
            <xs:attribute name="idioma" type="xs:string"/>
            XML
            <título idoma = “inglés”>Hamlet</título>

            Otros ajustes
                → Valores por defecto
                → Valor fijo 
                → Use: Un atributo puede ser opcional, obligatorio o no parecer en el elemento
                    Optional
                    Required
                    Prohibited (El att no debe aparecer en el documento XML.)

        Extensiones XSD: Extienden y amplian las características de un elemento
        simpleContent → Elementos que solo contienen datos (no otros elementos)
        simpleType → Define tipos para elementos o atributos. 

        Restricciones XSD → Especifican las condiciones que deben cumplir los datos. 
            Etiqueta restriction con las condiciones. 
            Ejemplo: 
            <xs:element name ="valores"> 
                <xs:simpleType> 
                    <xs:restriction base="xs:integer"> 
                        <xs:minInclusive value="20"/> 
                        <xs:maxInclusive value="100"/> 
                    </xs:restriction> 
                </xs:simpleType> 
            </xs:element>

            Tipos: 
            Patrones → <xs:pattern value="patrón"/>
                [valores permitidos] {Valores incluidos} (Agrupación Caracteres)
                * Una, ninguna o varias veces
                + Una o varias 
                ? Ninguna o una 

            minExclusive → Mínimo no incluido que admite un elemento 
                <xs:minExclusive = "10"/> El valor 11 está permitido, pero no el 10. 
            maxExclusive → Máximo no incluido. 
                <xs:maxExclusive = "100"/> El valor 99 está permitido, pero no el 1100. 
            minInclusive → Mínimo incluido 
                <xs:minInclusive = "10"/> El valor 10 está permitido. 
            maxInclusive → Máximo incluido 
                <xs:maxInclusive = "100"/> El valor 100 está permitido. 
            totalDigits → Nº máx dígitos que puede tener una cifra.  
                <xs:totalDigits = "4"/> El valor 450 es válido, pero no el número 12560. 
            fractionDigits → Nº máximo decimales  
                <xs:fractionDigits = "2"/> El valor 45,23 es válido, pero no el número 45,9823. 
            length → Nº exacto caracteres. Textos y números. 
                <xs:length = "6"/> Toledo es correcto, Ávila o Zaragoza no. 
            minLength → Min nº caracteres. 
                <xs:minLength = "6"/> Toledo y Zaragoza son correctos, Ávila no. 
            maxLength → Max nº caracteres. 
                <xs:maxLength = "6"/> Zaragoza no es correcto, Ávila sí. 
            enumeration → Crea lista de valores permitidos 
                → <xs:enumeration = "rojo">  
                → <xs:enumeration = "verde"/>  
                → <xs:enumeration = "azul">  
 
 Asociados a XML existen otros lenguajes: 
    Xpath → para navegar los documentos XML 
    XQuery → Consultas a documentos XML 
    XSLT → Aplica transformación a los datos de un doc XML.-->